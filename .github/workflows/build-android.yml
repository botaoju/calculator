name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

# Set permissions for GITHUB_TOKEN
permissions:
  contents: read
  actions: read
  checks: write

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install buildozer kivy[base] kivymd cython
        if [ -f requirements_android.txt ]; then pip install -r requirements_android.txt; fi
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git zip unzip openjdk-11-jdk python3-pip \
          autoconf automake libtool pkg-config \
          zlib1g-dev libncurses5-dev libncursesw5-dev libtinfo6 \
          cmake libffi-dev libssl-dev build-essential \
          libgstreamer1.0-dev gstreamer1.0-plugins-base \
          gstreamer1.0-plugins-good gstreamer1.0-plugins-bad \
          gstreamer1.0-plugins-ugly libgstreamer-plugins-base1.0-dev
        
    - name: Setup Android SDK and NDK
      run: |
        mkdir -p ~/.buildozer/android/platform
        cd ~/.buildozer/android/platform
        
        # Download Android SDK Command Line Tools
        for i in {1..3}; do
          if wget --timeout=30 --tries=3 -q https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip; then
            break
          elif curl -L --connect-timeout 30 --max-time 300 -o commandlinetools-linux-8512546_latest.zip https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip; then
            break
          else
            echo "Download attempt $i failed, retrying..."
            sleep 10
          fi
        done
        
        if [ ! -f commandlinetools-linux-8512546_latest.zip ]; then
          echo "Failed to download Android SDK tools after 3 attempts"
          exit 1
        fi
        
        unzip -q commandlinetools-linux-8512546_latest.zip
        mkdir -p android-sdk/cmdline-tools/latest
        mkdir -p android-sdk/tools/bin
        mv cmdline-tools/* android-sdk/cmdline-tools/latest/
        
        # Create absolute symlinks for buildozer compatibility
        ln -sf ~/.buildozer/android/platform/android-sdk/cmdline-tools/latest/bin/sdkmanager ~/.buildozer/android/platform/android-sdk/tools/bin/sdkmanager
        ln -sf ~/.buildozer/android/platform/android-sdk/cmdline-tools/latest/bin/avdmanager ~/.buildozer/android/platform/android-sdk/tools/bin/avdmanager
        
        # Also create the tools directory structure that buildozer expects
        mkdir -p android-sdk/tools/lib
        
        # Make sure the tools are executable
        chmod +x android-sdk/cmdline-tools/latest/bin/*
        
        export ANDROID_SDK_ROOT=~/.buildozer/android/platform/android-sdk
        export PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/tools/bin
        yes | sdkmanager --licenses
        sdkmanager "build-tools;30.0.3" "platforms;android-30" "platform-tools"
        
        # Download and setup NDK 25b (minimum required version)
        echo "Downloading Android NDK 25b..."
        for i in {1..3}; do
          if wget --timeout=60 --tries=3 -q https://dl.google.com/android/repository/android-ndk-r25b-linux.zip; then
            break
          elif curl -L --connect-timeout 60 --max-time 600 -o android-ndk-r25b-linux.zip https://dl.google.com/android/repository/android-ndk-r25b-linux.zip; then
            break
          else
            echo "NDK download attempt $i failed, retrying..."
            sleep 15
          fi
        done
        
        if [ ! -f android-ndk-r25b-linux.zip ]; then
          echo "Failed to download Android NDK after 3 attempts"
          exit 1
        fi
        
        echo "Extracting NDK..."
        unzip -q android-ndk-r25b-linux.zip
        mv android-ndk-r25b android-ndk
        
        export ANDROID_NDK_ROOT=~/.buildozer/android/platform/android-ndk
        
        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "ANDROID_NDK_ROOT=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
        echo "ANDROIDNDK=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
        echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH
        echo "$ANDROID_SDK_ROOT/build-tools/30.0.3" >> $GITHUB_PATH
        echo "$ANDROID_SDK_ROOT/tools/bin" >> $GITHUB_PATH
    
一下    - name: Build APK
jiancha      run: |
        # Set network timeout and retry configurations
        export PIP_TIMEOUT=300
        export PIP_RETRIES=5
        export PIP_DEFAULT_TIMEOUT=300
        
        # Configure buildozer with network retry
        buildozer android debug || {
          echo "First build attempt failed, retrying..."
          sleep 30
          buildozer android debug || {
            echo "Second build attempt failed, retrying with clean..."
            buildozer android clean
            sleep 30
            buildozer android debug
          }
        }
    
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: calculator-apk
        path: bin/*.apk
